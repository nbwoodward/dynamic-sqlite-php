{"name":"Dynamic-sqlite-php","tagline":"","body":"@ Dynamic Sqlite Readme\r\n\r\n@ License Information -- Released under MIT Open Source License, Please see included license \r\n\r\nCopyright (c) 2012 Nick Woodward\r\n\r\n\r\n#Dynamic SQLite API\r\nThe Dynamic SQLite API provides several methods for easily performing CRUD operations on SQLite databases.\r\n\r\n##Database Methods\r\n###open\\_database($dbase\\_relative\\_pathname)\r\nOpen a database. Input is the relative pathname of the database file. Return is the PDO handle of the database.\r\n\r\n**Note:** If the database file does not exist, it will be created, so databases can be created using this method.\r\n\r\n\r\n####Usage:\r\n\t\t$pdo = $dyna->open_database('db/myDatabase.sqlite');\r\n\r\n###delete\\_database($dbase\\_relative\\_pathname)\r\n####Usage:\r\nDelete an SQLite database. Returns 0 on failure, 1 on success.\r\n\r\n\t\t$dyna->delete_database('db/myDatabase.sqlite');\r\n\r\n###export\\_database($pdo, $array\\_of\\_tables\\_to\\_export = null)\r\n\r\nExport a database to an array of tables and their schemas and rows.\r\n\r\n**Note:**Not recommended for large databases.\r\n\r\n**Note:**If $array\\_of\\_tables\\_to\\_export is null, all tables will be exported.\r\n\r\n####Usage:\r\n\r\n\t\t$db = $dyna->export_database($pdo, array('table1','table2'));\r\n\r\n\t\t/* Output:\r\n\t\t$db = array( \r\n\t\t\t[table1] => array(\r\n\t\t\t\t[schema] => array(\r\n\t\t\t\t\t[id] => 'INTEGER',\r\n\t\t\t\t\t[name] => 'TEXT'\r\n\t\t\t\t)\r\n\t\t\t\t[data] => array(\r\n\t\t\t\t\t[0] => array([id] => 1, [name] => 'Bill'),\r\n\t\t\t\t\t[1] => array([id] => 2, [name] => 'Suzy') \r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t\t[table2] => array(\r\n\t\t\t\t[schema] => array(\r\n\t\t\t\t\t[id] => 'INTEGER',\r\n\t\t\t\t\t[animal] => 'TEXT'\r\n\t\t\t\t\t[danger] => 'INTEGER'\r\n\t\t\t\t)\r\n\t\t\t\t[data] => array(\r\n\t\t\t\t\t[0] => array([id] => 1, [animal] => 'sheep', [danger] => 3), \r\n\t\t\t\t\t[1] => array([id] => 2, [animal] => 'wolf', [danger] => 9) \r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t)\r\n\r\n\t\t*/\r\n\r\n\r\n###import\\_database($pdo, $array\\_of\\_tables\\_schemas\\_and\\_columns)\r\n\r\nImport an array of tables and their schemas and elements into a database.\r\n**Note:** See the usage section of export\\_database() for the format of $array\\_of\\_tables\\_schemas\\_and\\_columns.\r\n####Usage:\r\n\r\n\t\t$db = $dyna->export_database($pdo1);\r\n\t\t$dyna->import_database($pdo2, $db);\r\n\r\n\r\n<hr>\r\n##Tables Methods\r\n###create\\_table($pdo, $table\\_name, $columns = array())\r\n\r\nCreates a table in a database with column names and types defined by $columns.\r\n####Usage:\r\n\r\n\t\t$columns = array('id' => 'INTEGER PRIMARY KEY', 'name' => 'TEXT', 'age' => 'NUMERIC');\r\n\t\t$dyna->create_table($pdo, 'myTable', $columns);\r\n\r\n###delete\\_table($pdo, $table\\_name)\r\n\r\nDeletes a table in a database.\r\n####Usage:\r\n\r\n\t\t$dyna->delete_table($pdo, 'myTable');\r\n\r\n###style='font-size:1.05em'>export\\_table($pdo, $table\\_name, $order\\_by = null, $limit=999, $offset=0)\r\nExport a table or a portion of a table to an array.\r\n\r\n**Note:** $limit sets the number of rows to export ($limit=10 will export 10 rows).\r\n\r\n**Note:** $offset sets which row to start selection ($offset = 5 will ignore the first 5 rows, which are dictated by the $order\\_by clause).\r\n\r\n**Note:** If $order\\_by is set to null the order will default to either the primary key or the SQLite auto incremented ROWID. \r\n####Usage:\r\n\r\n\t\t$myTable = $dyna->export_table($pdo,'myTable');\r\n\t\t/*Output:\r\n\t\t$myTable =  array(\r\n\t\t\t[schema] => array(\r\n\t\t\t\t[id] => 'INTEGER',\r\n\t\t\t\t[animal] => 'TEXT'\r\n\t\t\t\t[danger] => 'INTEGER'\r\n\t\t\t)\r\n\t\t\t[data] => array(\r\n\t\t\t\t[0] => array([id] => 1, [animal] => 'tiger', [danger] => 10), \r\n\t\t\t\t[1] => array([id] => 2, [animal] => 'sheep', [danger] => 3), \r\n\t\t\t\t[2] => array([id] => 3, [animal] => 'wolf', [danger] => 9) \r\n\t\t\t)\r\n\t\t)\r\n\t\t*/\r\n\r\n\t\t$myTableLimited = $dyna->export_table($pdo,'myTable', 'name, 2, 1);\r\n\r\n\t\t/*Output:\r\n\t\t$myTableLimited =  array(\r\n\t\t\t[schema] => array(\r\n\t\t\t\t[id] => 'INTEGER',\r\n\t\t\t\t[animal] => 'TEXT'\r\n\t\t\t\t[danger] => 'INTEGER'\r\n\t\t\t)\r\n\t\t\t[data] => array(\r\n\t\t\t\t[0] => array([id] => 1, [animal] => 'tiger', [danger] => 10), \r\n\t\t\t\t[1] => array([id] => 3, [animal] => 'wolf', [danger] => 9) \r\n\t\t\t)\r\n\t\t)\r\n\t\t*/\r\n\r\n###import\\_table($pdo, $table\\_name, $array\\_of\\_schema\\_and\\_columns)\r\n\r\nImport an array of schema and columns into a database.\r\n<br>**Note:** For the format of the array, see the usage section of export\\_table().\r\n####Usage:\r\n\r\n\t\t$myTable = $dyna->export_table($pdo, 'myTable');\r\n\t\t$dyna->import_table($pdo, 'myOtherTable', $myTable);\r\n\r\n###rename\\_table($pdo, $table\\_name, $new\\_name)\r\n\r\nRename a table in a database.\r\n####Usage:\r\n\r\n\t\t$dyna->rename_table($pdo, 'myTable', 'yourTable');\r\n\r\n###copy\\_table\\_to\\_other\\_sqlite\\_dbase($pdo, $table\\_name, $new\\_pdo)\r\n\r\nCopy a table from one database to another.\r\n####Usage:\r\n\r\n\t\t$pdo1 = open_database('db1.sqlite');\r\n\t\t$pdo2 = open_database('db2.sqlite');\r\n\t\t$dyna->copy_table_to_other_sqlite_dbase($pdo1, 'myTable', $pdo2);\r\n\r\n<hr>\r\n##Column Methods\r\n###add\\_column($pdo, $table\\_name, $column\\_name, $column\\_type = 'text')\r\n\r\nAdd a column to a table.\r\n\r\n**Note:** See <a target='\\_blank' href='http://www.sqlite.org/datatype3.html'>SQLite3 Datatypes</a> for a description of valid column types.\r\n####Usage:\r\n\r\n\t\t$dyna->add_column($pdo, 'myTable', 'age', 'numeric');\r\n\r\n###delete\\_column($pdo, $table\\_name, $column\\_name)\r\n\r\nDelete a column from a table.\r\n####Usage:\r\n\r\n\t\t$dyna->delete_column($pdo, 'myTable', 'age');\r\n\r\n###rename\\_column($pdo, $table\\_name, $column\\_name, $new\\_name)\r\n\r\nRename a column in a table.\r\n####Usage:\r\n\r\n\t\t$dyna->rename_column($pdo, 'myTable', 'name', 'animal');\r\n\r\n<hr>\r\n##Row Methods\r\n###update($pdo, $table\\_name, $record\\_array, $strict=false)\r\n\r\nUpdate or insert a row into a table.\r\n\r\n**Note:** Setting $strict=false allows new columns can be added through a record. Setting $strict=true will reject any entry that attempts to add a column. See usage.\r\n\r\n**Note:** The type of a column added through a record will be assigned 'text' or 'numeric' accordingly.\r\n####Usage:\r\n\r\n\t\t$schema = array('id' => 'integer primary key', 'name' => 'text');\r\n\t\t$dyna->create_table($pdo, 'myTable', $schema)\r\n\r\n\t\t$record = array('id' => 0 , 'name' => 'lion', 'danger' = 9);\r\n\t\t$dyna->update($pdo, 'myTable, $record);\r\n\t\t//This adds the column 'danger' to the table (since $strict defaults to false)\r\n\r\n\t\t$record = array('id' => 0 , 'name' => 'sheep', 'fluffyness' = 8);\r\n\t\t$dyna->update($pdo, 'myTable, $record, true);\r\n\t\t//The row is not added since $strict=true and the record \r\n\t\t//attempted to add the column 'fluffyness'.\r\n\r\n###update_all($pdo, $table\\_name, $array\\_of\\_records, $strict=false)\r\n\r\nUpdate or insert many rows in a table.\r\n\r\n**Note:** This uses prepared statements to significantly decrease the time needed for multiple transactions. \r\n####Usage:\r\n\r\n\t\t$schema = array('id' => 'integer primary key', 'name' => 'text');\r\n\t\t$dyna->create_table($pdo, 'myTable', $schema)\r\n\r\n\t\t$record_array = array();\r\n\t\tfor ($i=0; $i<20; $i++){\r\n\t\t\t$record = array(\r\n\t\t\t\t\"name\" => \"person $i\",\r\n\t\t\t\t\"age\" => $i\r\n\t\t}\r\n\t\t$dyna->update_all($pdo, 'myTable, $record_array);\r\n\t\t//This inserts all of the records into the database much faster than inserting them individually.\r\n\r\n###get($pdo, $table\\_name, $id)\r\n\r\nGet a row by its id. \r\n####Usage:\r\n\r\n\t\t$dyna->get($pdo,'myTable', 1) //Returns the row with 'id' = 1.\r\n\r\n###delete($pdo, $table\\_name, $id)\r\n\r\nDelete a row with a given id.\r\n####Usage:\r\n\r\n\t\t$dyna->delete($pdo, 'myTable', 1) //Deletes rows with 'id' = 1\r\n\r\n###query( $pdo, $query )\r\n\r\nQuery a database. Returns all rows that satisfy the query.\r\n####Usage:\r\n\r\n\t\t$query = \"SELECT * FROM myTable WHERE 'name' = 'bob'\"\r\n\t\t$dyna->query($pdo,$query); \r\n\t\t//Returns all rows where 'name' = 'bob'\r\n\r\n###delete\\_by\\_query($pdo, $table\\_name, $query)\r\n\r\nDelete all rows that satisfy a given query.\r\n####Usage:\r\n\r\n\t\t$query = \"'name' = 'bob'\"\r\n\t\t$dyna->delete_by_query($pdo, 'myTable', $query); \r\n\t\t//Deletes all rows where 'name' = 'bob'\r\n\r\n<hr>\r\n##Utility/Other Methods\r\n###escape($str)\r\n\r\nAdds quotes to a string and escapes special charaters.\r\n<br>**Note:**See documentation on <a target='_blank' href='http://php.net/manual/en/pdo.quote.php'>PDO::quote()</a> for explanation and usage.\r\n###get\\_table\\_schema($pdo, $table\\_name)\r\n\r\nReturns the schema of a table. \r\n####Usage:\r\n\r\n\t\t$schema = $dyna->get_table_schema($pdo, 'myTable');\r\n\t\t\r\n\t\t/* Output:\r\n\t\t$schema = array(\r\n\t\t\t[id] => 'integer',\r\n\t\t\t[name] => 'text'\r\n\t\t)\r\n\t\t*/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}